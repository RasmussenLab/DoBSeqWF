// Execution specific profile parameters for DoBSeq pipeline
// mads 2024-03-06

// Base configuration with standard error strategy.

process {
    errorStrategy = { task.exitStatus in ((130..145) + 104 + 247) ? 'retry' : 'finish' }
    maxRetries    = 1
    conda = "${projectDir}/envs/base/environment.yaml"
}

profiles {

    standard {

        params {
            outputDir = "results"
            fgbio = "fgbio"
            annotate = false
            spark_markdup = false
        }
        
        process {
            executor = 'local'

            // Base configuration for unlabelled process
            cpus   = { 1      * task.attempt }
            memory = { 6.GB   * task.attempt }
            time   = { 4.h    * task.attempt }

            // Labelled configurations
            withLabel:process_single {
                cpus   = { 1                   }
                memory = { 6.GB * task.attempt }
                time   = { 4.h  * task.attempt }
            }

            withLabel:process_low {
                cpus   = { 2     * task.attempt }
                memory = { 12.GB * task.attempt }
                time   = { 4.h   * task.attempt }
            }

            withLabel:process_medium {
                cpus   = { 6     * task.attempt }
                memory = { 36.GB * task.attempt }
                time   = { 8.h   * task.attempt }
            }

            withLabel:process_multi {
                cpus   = { 24    * task.attempt }
                memory = { 30.GB * task.attempt }
                time   = { 8.h   * task.attempt }
            }
        }
    }

    test {

        process {
            executor = 'local'
            resourceLimits = [
                cpus: 2,
                memory: '4.GB',
                time: '1.h'
            ]
        }

        params {
            outputDir = "results"
            fgbio = "fgbio"
            spark_markdup = false
            filter = true
            ploidy = 2
            intervalList = ["small_ref"]
            testing = true
            annotate = false
            pooltable = "$projectDir/assets/data/test_data/pooltable.tsv"
            fqtable = "$projectDir/assets/data/test_data/pooltable.tsv"
            decodetable = "$projectDir/assets/data/test_data/decodetable.tsv"
            reference_genome = "$projectDir/assets/data/reference_genomes/small/small_reference"
            bedfile = "$projectDir/assets/data/test_data/target_calling.bed"
            bedfile_bam_extraction = "$projectDir/assets/data/test_data/target_calling.bed"
            dictfile = "$projectDir/assets/data/test_data/target_calling.dict"
            snv_list = "$projectDir/assets/data/test_data/snvlist.tsv"
            mills = "$projectDir/assets/data/test_data/databases/mills.vcf"
            g1000 = "$projectDir/assets/data/test_data/databases/g1000.vcf"
            clinvar_db = "$projectDir/assets/data/test_data/databases/clinvar.vcf"
            snpeff_config = "$projectDir/assets/data/test_data/databases/snpeff/snpeff.config"
            snpeff_cache = "$projectDir/assets/data/test_data/databases/snpeff/"
        }
    }

    simulation {
        params {
            simID = "sim_2x2"
            ploidy = 2
            testing = true
            pooltable = "$projectDir/assets/data/simulated_data/$params.simID/pooltable.tsv"
            decodetable = "$projectDir/assets/data/simulated_data/$params.simID/decodetable.tsv"
            reference_genome = "$projectDir/assets/data/reference_genomes/chr1_subset/chr1_subset"
            bedfile = "$projectDir/assets/data/simulated_data/$params.simID/target_calling.bed"
            snv_list = "$projectDir/assets/data/simulated_data/$params.simID/snvlist.tsv"
        }
    }
}
